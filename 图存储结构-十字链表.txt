//邻接矩阵表示
#include"stdio.h"
#include"stdlib.h"
#define MAX_VERTEX_NUM 20/*最大顶点个数*/
typedef int VertexData;
/*DG 有向图；DN有向网；UDG无向图；UDN无向网*/
typedef enum{DG,DN,UDG,UDN}GraphKind;


typedef struct ArcNode
{
	int tailvex,headvex;
	struct ArcNode *hlink,*tlink;
}ArcNode;
typedef struct VertexNode
{
	int data;
	ArcNode *firstin,*firstout;
} VertexNode;
typedef struct 
{
	VertexNode vertex[MAX_VERTEX_NUM];
	int vexnum,arcnum;
	GraphKind king;
}OrthList;
int LocateVertex(OrthList *G,VertexData v)
{
	int j=0,k;
	for(k=0;k<G->vexnum;k++)
		if(G->vertex[k].data==v)
		{j=k;break;}
	return j;
}
void CrtORthList(OrthList *g)
{
	ArcNode* p;
	int n,e,i,k,j;
	VertexData vt,vh;
	scanf("%d,%d",&n,&e);
	g->vexnum=n;
	g->arcnum=e;
	for(i=0;i<n;i++)
	{
		scanf("%c",&(g->vertex[i].data));
		g->vertex[i].firstin=NULL;
		g->vertex[i].firstout=NULL;
	}
	for(k=0;k<e;k++)
	{
		scanf("%d,%d",&vt,&vh);
		i=LocateVertex(g,vt);
		j=LocateVertex(g,vh);
		p=(ArcNode*)malloc(sizeof(ArcNode));
		p->tailvex=i;
		p->headvex=j;
		p->tlink=g->vertex[i].firstout;
		g->vertex[i].firstout=p;
		p->hlink=g->vertex[j].firstin;
		g->vertex[j].firstin=p;


	}
}


int main()
{
	return 0;
}