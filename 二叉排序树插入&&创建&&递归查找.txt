#include"stdio.h"
#include"stdlib.h"
#define LIST_SIZE 100000
typedef int KeyType;
typedef struct node {
	KeyType key;
	struct node *lchild,*rchild;
}BSTNode,*BSTree,*BiTree;
void InsertBST(BSTree *bst,KeyType key)
{
	BiTree s;
	if(*bst==NULL)
	{
		s=(BSTree)malloc(sizeof(BSTNode));
		s->key=key;
		s->lchild=NULL;s->rchild=NULL;
		*bst=s;
	}
	else if(key<(*bst)->key)
		InsertBST(&((*bst)->lchild),key);
	else if(key<(*bst)->key)
		InsertBST(&((*bst)->rchild),key);
}
void CreateBST(BSTree *bst)
{
	KeyType key;
	*bst=NULL;
	scanf("%d",&key);
	while(key!=0)
	{
		InsertBST(bst,key);
		scanf("%d",&key);
	}
}
BSTree SearchBST(BSTree bst,int key)
{
	if(!bst) return 0;
	else if(bst->key==key) return bst;
	else if(bst->key>key) return SearchBST(bst->lchild,key);
	else return SearchBST(bst->rchild,key);
}


int main()
{
	BSTree bst;
	CreateBST(&bst);
	int key;
	scanf("%d",&key);
	SearchBST(bst,key);
	return 0;
}
