#include"stdio.h"
#define size 50
typedef int StackElemType;
typedef struct
{
	StackElemType elem[size];
	int top;
}SeqStack;
//构造空栈
void InitStack(SeqStack *S)
{
	S->top=-1;
}
//进栈
int Push(SeqStack *S,StackElemType x)
{
	/*将X置入S栈顶*/
	if(S->top==size-1) return 0;
	S->top++;
	S->elem[S->top]=x;
	return 1;
}
//出栈
int Pop(SeqStack *S,StackElemType *x)
{
	if(S->top==-1)
		 return 0;
	else
	{
		*x=S->elem[S->top];
		S->top--;
		return 1;
	}
}
//读栈顶
int GetTop(SeqStack *S,StackElemType *x)
{
	if(S->top==-1)
		 return 0;
	else
	{
		*x=S->elem[S->top];
		return 1;
	}
}
void main()
{
	int x,x1,x2,a;
	SeqStack S;
	InitStack(&S);
	printf("1.进栈 \n2.出栈\n3.栈顶\n请输入选项：");
	scanf("%d",&a);
	while(a!=0)
	{
		switch(a)
		{
			case 1:{ 
						printf("请输入进栈元素：");
						scanf("%d",&x);
						while(x!=0)
						{	
							if(Push(&S,x)==1)
								;
							else printf("栈已满！");
						printf("请输入进栈元素：");
						scanf("%d",&x);
						}
				   };break;
			
			case 2:{
				while(S.top!=-1)
				{	Pop(&S,&x1);
					printf("%d \n",x1);
				}
				   };break;
			
			
			case 3:{if(GetTop(&S,&x2)==0)
					   printf("栈为空！");
					else
					   printf("%d",x2);}break;
			default :printf("error");
		}
		printf("\n请输入选项：");
		scanf("%d",&a);
	}
}