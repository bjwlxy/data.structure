//邻接矩阵表示
#include"stdio.h"
#define MAX_VERTEX_NUM 20/*最大顶点个数*/
#define INFINITY 32768/*极大值*/
/*DG 有向图；DN有向网；UDG无向图；UDN无向网*/
typedef enum{DG,DN,UDG,UDN}GraphKind;
typedef char VertexData;/*顶点数据类型*/

typedef struct ArcNode
{
	int adj;/*无权图，用1/0表示是否相邻；对带权图，为权值类型*/
	int info;
}ArcNode;

typedef struct
{
	VertexData vertex[MAX_VERTEX_NUM];   /*顶点向量*/
	ArcNode arcs[MAX_VERTEX_NUM][MAX_VERTEX_NUM];/*邻接矩阵*/
	int vexnum,arcnum;/*图的顶点数和弧数*/
	GraphKind kind;/*图的种类标志*/
}AdjMatrix;
int LocateVertex(AdjMatrix *G,VertexData v)
{
	int j=0,k;
	for(k=0;k<G->vexnum;k++)
		if(G->vertex[k]==v)
		{j=k;break;}
	return j;
}
int CreateDN(AdjMatrix *G)
{
	int i,j,k,weight;
	VertexData v1,v2;
	scanf("%d,%d",&G->arcnum,&G->vexnum);
	for(i=0;i<G->vexnum;i++)
		for(j=0;i<G->vexnum;j++)
			G->arcs[i][j].adj=INFINITY;
	for(i=0;i<G->vexnum;i++)
		scanf("%c",&G->vertex[i]);
	for(k=0;k<G->arcnum;k++)
	{
		scanf("%c,%c,%d",&v1,&v2,&weight);
		i=LocateVertex(G,v1);
		j=LocateVertex(G,v2);
		G->arcs[i][j].adj=weight;
	}
	return 1;
}
int main()
{
	return 0;
}